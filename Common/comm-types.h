#ifndef __COMM_TYPES__
#define __COMM_TYPES__

#include <stdint.h>

#define COORD_IP_ADDR 2130706433 // 127.0.0.1 in decimal (0x7F000001)
#define COORD_UDP_PORT 40000

#define TLV_CODE_NAME 1
#define TLV_CODE_NAME_LEN 32

typedef enum msg_type_ {
  SUBS_TO_COORD,
  COORD_TO_SUBS,
  PUB_TO_COORD,
  COORD_TO_PUB
} msg_type_t;

typedef enum sub_msg_type_ {
  SUB_MSG_DATA, // Data msg generated by publisher to be conveyed to subscribers
  SUB_MSG_ADD,  // Publisher adding a new msg OR Subscriber subscribing to a msg
  SUB_MSG_DELETE,     // Publisher unpublishing OR Subscriber unsubscribing
  SUB_MSG_REGISTER,   // Publisher or Subscriber registering with coordinator
  SUB_MSG_UNREGISTER, // Unregistering from coordinator
  SUB_MSG_ERROR,      // Error message
  SUB_MSG_ID_ALLOC_SUCCESS
} sub_msg_type_t;

typedef enum cmsg_pr_ {
  CMSG_PR_LOW,
  CMSG_PR_MEDIUM,
  CMSG_PR_HIGH,
  CMSG_PR_MAX
} cmsg_pr_t;

typedef struct cmsg_ {
  uint32_t msg_id;             // Unique ID assigned by coordinator
  msg_type_t msg_type;         // Message direction
  sub_msg_type_t sub_msg_type; // Specific type of sub-message
  cmsg_pr_t priority;          // Priority of message
  uint32_t msg_code;           // Application-specific message code

  union {
    uint32_t publisher_id;
    uint32_t subscriber_id;
  } id;

  uint16_t tlv_buffer_size; // Length of tlv_buffer
  char tlv_buffer[0];       // Flexible payload (TLV data)
} cmsg_t;

// Optional helper functions for debugging/logging
static inline const char *msg_type_to_string(msg_type_t msg_type) {
  switch (msg_type) {
  case SUBS_TO_COORD:
    return "SUBS_TO_COORD";
  case COORD_TO_SUBS:
    return "COORD_TO_SUBS";
  case PUB_TO_COORD:
    return "PUB_TO_COORD";
  case COORD_TO_PUB:
    return "COORD_TO_PUB";
  default:
    return "UNKNOWN_MSG_TYPE";
  }
}

static inline const char *sub_msg_type_to_string(sub_msg_type_t sub_msg_type) {
  switch (sub_msg_type) {
  case SUB_MSG_DATA:
    return "SUB_MSG_DATA";
  case SUB_MSG_ADD:
    return "SUB_MSG_ADD";
  case SUB_MSG_DELETE:
    return "SUB_MSG_DELETE";
  case SUB_MSG_REGISTER:
    return "SUB_MSG_REGISTER";
  case SUB_MSG_UNREGISTER:
    return "SUB_MSG_UNREGISTER";
  case SUB_MSG_ERROR:
    return "SUB_MSG_ERROR";
  case SUB_MSG_ID_ALLOC_SUCCESS:
    return "SUB_MSG_ID_ALLOC_SUCCESS";
  default:
    return "UNKNOWN_SUB_MSG_TYPE";
  }
}

// Error codes
typedef enum error_codes_ { ERROR_TLV_MISSING } error_codes_t;

// TLV code to string
static inline const char *tlv_str(int tlv_code_cpoint) {
  switch (tlv_code_cpoint) {
  case TLV_CODE_NAME:
    return "TLV_CODE_NAME";
  default:
    return "UNKNOWN";
  }

  return "UNKNOWN";
}

// TLV code to data length
static int tlv_data_len(int tlv_code_point) {
  switch (tlv_code_point) {
  case TLV_CODE_NAME:
    return TLV_CODE_NAME_LEN;
  default:
    return 0;
  }

  return 0;
}

static inline const char *tlv_str(int tlv_code_cpoint);

static int tlv_data_len(int tlv_code_point);

#endif // __COMM_TYPES__
